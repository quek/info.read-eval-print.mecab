;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.1
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(cl:in-package #:info.read-eval-print.mecab)

(cffi:define-foreign-library libmecab
  (:unix "libmecab.so"))

(cffi:use-foreign-library libmecab)



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcstruct mecab_dictionary_info_t
	(filename :string)
	(charset :string)
	(size :unsigned-int)
	(type :int)
	(lsize :unsigned-int)
	(rsize :unsigned-int)
	(version :unsigned-short)
	(next :pointer))

(cffi:defcstruct mecab_path_t
	(rnode :pointer)
	(rnext :pointer)
	(lnode :pointer)
	(lnext :pointer)
	(cost :int)
	(prob :float))

(cffi:defcstruct mecab_learner_path_t
	(rnode :pointer)
	(rnext :pointer)
	(lnode :pointer)
	(lnext :pointer)
	(cost :double)
	(fvector :pointer))

(cffi:defcstruct mecab_token_t
	(lcAttr :unsigned-short)
	(rcAttr :unsigned-short)
	(posid :unsigned-short)
	(wcost :short)
	(feature :unsigned-int)
	(compound :unsigned-int))

(cffi:defcstruct mecab_node_t
	(prev :pointer)
	(next :pointer)
	(enext :pointer)
	(bnext :pointer)
	(rpath :pointer)
	(lpath :pointer)
	(begin_node_list :pointer)
	(end_node_list :pointer)
	(surface :string)
	(feature :string)
	(id :unsigned-int)
	(length :unsigned-short)
	(rlength :unsigned-short)
	(rcAttr :unsigned-short)
	(lcAttr :unsigned-short)
	(posid :unsigned-short)
	(char_type :unsigned-char)
	(stat :unsigned-char)
	(isbest :unsigned-char)
	(sentence_length :unsigned-int)
	(alpha :float)
	(beta :float)
	(prob :float)
	(wcost :short)
	(cost :long)
	(token :pointer))

(cffi:defcstruct mecab_learner_node_t
	(prev :pointer)
	(next :pointer)
	(enext :pointer)
	(bnext :pointer)
	(rpath :pointer)
	(lpath :pointer)
	(anext :pointer)
	(surface :string)
	(feature :string)
	(id :unsigned-int)
	(length :unsigned-short)
	(rlength :unsigned-short)
	(rcAttr :unsigned-short)
	(lcAttr :unsigned-short)
	(posid :unsigned-short)
	(char_type :unsigned-char)
	(stat :unsigned-char)
	(isbest :unsigned-char)
	(alpha :double)
	(beta :double)
	(wcost2 :short)
	(wcost :double)
	(cost :double)
	(fvector :pointer)
	(token :pointer))

(cl:defconstant MECAB_NOR_NODE 0)

(cl:defconstant MECAB_UNK_NODE 1)

(cl:defconstant MECAB_BOS_NODE 2)

(cl:defconstant MECAB_EOS_NODE 3)

(cl:defconstant MECAB_USR_DIC 1)

(cl:defconstant MECAB_SYS_DIC 0)

(cl:defconstant MECAB_UNK_DIC 2)

(cffi:defcfun ("mecab_do" mecab_do) :int
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("mecab_new" mecab_new) :pointer
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("mecab_new2" mecab_new2) :pointer
  (arg :string))

(cffi:defcfun ("mecab_version" mecab_version) :string)

(cffi:defcfun ("mecab_strerror" mecab_strerror) :string
  (mecab :pointer))

(cffi:defcfun ("mecab_destroy" mecab_destroy) :void
  (mecab :pointer))

(cffi:defcfun ("mecab_get_partial" mecab_get_partial) :int
  (mecab :pointer))

(cffi:defcfun ("mecab_set_partial" mecab_set_partial) :void
  (mecab :pointer)
  (partial :int))

(cffi:defcfun ("mecab_get_theta" mecab_get_theta) :float
  (mecab :pointer))

(cffi:defcfun ("mecab_set_theta" mecab_set_theta) :void
  (mecab :pointer)
  (theta :float))

(cffi:defcfun ("mecab_get_lattice_level" mecab_get_lattice_level) :int
  (mecab :pointer))

(cffi:defcfun ("mecab_set_lattice_level" mecab_set_lattice_level) :void
  (mecab :pointer)
  (level :int))

(cffi:defcfun ("mecab_get_all_morphs" mecab_get_all_morphs) :int
  (mecab :pointer))

(cffi:defcfun ("mecab_set_all_morphs" mecab_set_all_morphs) :void
  (mecab :pointer)
  (all_morphs :int))

(cffi:defcfun ("mecab_sparse_tostr" mecab_sparse_tostr) :string
  (mecab :pointer)
  (str :string))

(cffi:defcfun ("mecab_sparse_tostr2" mecab_sparse_tostr2) :string
  (mecab :pointer)
  (str :string)
  (len :pointer))

(cffi:defcfun ("mecab_sparse_tostr3" mecab_sparse_tostr3) :string
  (mecab :pointer)
  (str :string)
  (len :pointer)
  (ostr :string)
  (olen :pointer))

(cffi:defcfun ("mecab_sparse_tonode" mecab_sparse_tonode) :pointer
  (mecab :pointer)
  (arg1 :string))

(cffi:defcfun ("mecab_sparse_tonode2" mecab_sparse_tonode2) :pointer
  (mecab :pointer)
  (arg1 :string)
  (arg2 :pointer))

(cffi:defcfun ("mecab_nbest_sparse_tostr" mecab_nbest_sparse_tostr) :string
  (mecab :pointer)
  (N :pointer)
  (str :string))

(cffi:defcfun ("mecab_nbest_sparse_tostr2" mecab_nbest_sparse_tostr2) :string
  (mecab :pointer)
  (N :pointer)
  (str :string)
  (len :pointer))

(cffi:defcfun ("mecab_nbest_sparse_tostr3" mecab_nbest_sparse_tostr3) :string
  (mecab :pointer)
  (N :pointer)
  (str :string)
  (len :pointer)
  (ostr :string)
  (olen :pointer))

(cffi:defcfun ("mecab_nbest_init" mecab_nbest_init) :int
  (mecab :pointer)
  (str :string))

(cffi:defcfun ("mecab_nbest_init2" mecab_nbest_init2) :int
  (mecab :pointer)
  (str :string)
  (len :pointer))

(cffi:defcfun ("mecab_nbest_next_tostr" mecab_nbest_next_tostr) :string
  (mecab :pointer))

(cffi:defcfun ("mecab_nbest_next_tostr2" mecab_nbest_next_tostr2) :string
  (mecab :pointer)
  (ostr :string)
  (olen :pointer))

(cffi:defcfun ("mecab_nbest_next_tonode" mecab_nbest_next_tonode) :pointer
  (mecab :pointer))

(cffi:defcfun ("mecab_format_node" mecab_format_node) :string
  (mecab :pointer)
  (node :pointer))

(cffi:defcfun ("mecab_dictionary_info" mecab_dictionary_info) :pointer
  (mecab :pointer))

(cffi:defcfun ("mecab_dict_index" mecab_dict_index) :int
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("mecab_dict_gen" mecab_dict_gen) :int
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("mecab_cost_train" mecab_cost_train) :int
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("mecab_system_eval" mecab_system_eval) :int
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("mecab_test_gen" mecab_test_gen) :int
  (argc :int)
  (argv :pointer))


